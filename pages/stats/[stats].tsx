import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../../styles/Home.module.css'
import { useRouter } from 'next/router'
import useSWR from 'swr'
import {IAnime} from '../../models/Anime'
import fetcher from '../../utils/fetcher'

const Stats: NextPage = () => {
    const router = useRouter();
    const username = router.query.stats;
    
    const {data:animeList, error} = useSWR<IAnime[]>(`/api/stats/${username}`, fetcher)
    const components = animeList?.map(anime => <p key={anime._id}>{anime.title}</p>)
    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                {components}
            </main>

            <footer className={styles.footer}>
                <hr />
            </footer>
        </div>
    )
}

/*
export const getServerSideProps = async (context:GetServerSidePropsContext) => {
    const username = context.query.stats as String;
    //limit is 1000 for now, temporary fix until I want to be bothered with pagination
    const getAnimeURL = `https://api.myanimelist.net/v2/users/${username}/animelist?status=completed&limit=1000`
    // get list
    const MAL_ID  = process.env.MAL_ID as string;
    let animeList:{node:{id:Number, title:String}}[] = await fetch(getAnimeURL,{
      headers: {
        'Content-Type': 'application/json',
        'X-MAL-CLIENT-ID': MAL_ID
      }
    } ).then(res => res.json()).then(data => data.data);
  
    connectDB();
    const localAnimeList = await Promise.all(animeList.map(async (anime) => {
        const query: FilterQuery<IAnime> = {sources:{$all:[`https://myanimelist.net/anime/${anime.node.id}`]}};
        const res = await Anime.findOne(query);
        
        const result = res?.toObject();
        if (result) {
            result._id = result?._id.toString();
        }
        return result as IAnime;
    } ))

    console.log(localAnimeList)

    return {
        props: {
            localAnimeList,
        },
    }

}
*/
export default Stats
