import type { NextPage } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import useSWR from 'swr'
import PieCard, {PieCardProps} from '../../components/PieCard'
import { IAnime } from '../../models/Anime'
import fetcher from '../../utils/fetcher'
import styles from '../../styles/Stats.module.scss'

const Stats: NextPage = () => {
    const router = useRouter();
    const username = router.query.stats;
    const { data: animeList, error } = useSWR<IAnime[]>(`/api/stats/${username}`, fetcher)

    const mostWatchedGenresArr = mostWatchedGenres(animeList);
   
    return (
        <div>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <section className='hero'>
                    <div className='hero-body'>
                        <div className='container'>
                            <div className='columns'>
                                <div className='column is-half'>
                                    <PieCard title={'Most Watched Genres'}
                                    labels={mostWatchedGenresArr?.[0]}
                                    fillData={mostWatchedGenresArr?.[1]}/>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </main>

            <footer>
                <hr />
                <p>Blah blah blah</p>
            </footer>
        </div>
    )
}


const mostWatchedGenres = (rawData: IAnime[] | undefined) => {

    if(!rawData) {return undefined};

    // let us make a dict of all [genre]:count
    const initialValue:{
        [key: string]: any
    } = {};

    // accumulate it
    const tagData = rawData.reduce((accumulator, current) => {
        //add the tags
        current.tags.forEach((tag) => {
            const nTag = tag as string;
            if(accumulator[nTag]) {
                accumulator[nTag] += 1;
            } else {
                accumulator[nTag] = 1;
            }
        })
        return accumulator;
    }, initialValue)

    //sort it as a key:value pair
    const sortable = [];
    for(const genre in tagData) {
        sortable.push({genre:`${genre} (${tagData[genre]})`,count:tagData[genre]});
    }

    sortable.sort(function(a, b) {
        if (a.count > b.count) {
			return -1;
		}
		if (a.count < b.count) {
			return 1;
		}
		return 0;
    });

    // now convert it to 2 arrays for usage in the component
    const returnSort:[string[], number[]] = [[],[]];

    for(const sortedData of sortable) {
        returnSort[0].push(sortedData.genre);
        returnSort[1].push(sortedData.count);
    }

    return returnSort;
}


export default Stats
